public class Merge {
	
	public static void mergeSort(int[] array) {
	        if (array == null || array.length <= 1) {
	            return; // JÃ¡ ordenado
	        }
	        int[] helper = new int[array.length];
	        mergeSort(array, helper, 0, array.length - 1);
	    }

	public static void mergeSort(int[] array, int[] helper, int low, int high) {
	        if (low < high) {
	            int middle = (low + high) / 2;
	            mergeSort(array, helper, low, middle); // Ordena a metade esquerda
	            mergeSort(array, helper, middle + 1, high); // Ordena a metade direita
	            merge(array, helper, low, middle, high); // Junta as metades ordenadas
	        }
	    }

	public static void merge(int[] array, int[] helper, int low, int middle, int high){
	        // Copia ambos os lados do array para o array auxiliar
	        for (int i = low; i <= high; i++){
	            helper[i] = array[i];
	        }
	        
	        int i = low;
	        int j = middle + 1;
	        int k = low;

	        // Copia o menor valor de ambos os lados para o array original
	        while (i <= middle && j <= high){
	            if (helper[i] <= helper[j]){
	                array[k] = helper[i];
	                i++;
	            }else {
	                array[k] = helper[j];
	                j++;
	            }
	            k++;
	        }

	        // Copia o restante dos elementos da metade esquerda, se houver
	        while (i <= middle) {
	            array[k] = helper[i];
	            k++;
	            i++;
	        }
	    }

	    public static void main(String[] args) {
	        int[] array = {12, 11, 13, 5, 6, 7};

	        System.out.println("Array original:");
	        printArray(array);

	        mergeSort(array);

	        System.out.println("Array ordenado:");
	        printArray(array);
	    }

	    public static void printArray(int[] array) {
	        for (int value : array) {
	            System.out.print(value + " ");
	        }
	        System.out.println();
	    }
	}

